name: Build RISC-V GNU Toolchain DEB Package

on:
  workflow_dispatch:
  schedule:
    # Run weekly on Monday at 00:00 UTC to check for new releases
    - cron: '0 0 * * 1'
  push:

jobs:
  get-version:
    runs-on: ubuntu-22.04
    outputs:
      release_tag: ${{ steps.get_version.outputs.release_tag }}
    steps:
      - name: Get latest riscv-gnu-toolchain release
        id: get_version
        run: |
          # Get the latest release tag (date-based format like 2025.09.28)
          LATEST_TAG=$(curl -s https://api.github.com/repos/riscv-collab/riscv-gnu-toolchain/releases | jq -r '.[0].tag_name')
          echo "release_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "Latest release tag: ${LATEST_TAG}"

  build:
    needs: get-version
    runs-on: ubuntu-22.04
    timeout-minutes: 480  # 8 hours max for build
    strategy:
      matrix:
        variant:
          - { arch: rv32imac, abi: ilp32, name: "soft-float", fpu: "no FPU" }
          - { arch: rv32imafc, abi: ilp32f, name: "single-precision", fpu: "single-precision FPU" }
          - { arch: rv32gc, abi: ilp32d, name: "double-precision", fpu: "double-precision FPU" }

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake autotools-dev curl python3 python3-pip python3-tomli \
            libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex \
            texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev \
            ninja-build git cmake libglib2.0-dev libslirp-dev libpixman-1-dev

      - name: Clone riscv-gnu-toolchain
        run: |
          git clone --depth 1 --branch ${{ needs.get-version.outputs.release_tag }} https://github.com/riscv-collab/riscv-gnu-toolchain.git

      - name: Free up disk space
        run: |
          # Remove unnecessary packages to free up disk space
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          df -h

      - name: Configure toolchain for ${{ matrix.variant.arch }}/${{ matrix.variant.abi }}
        run: |
          cd riscv-gnu-toolchain

          ./configure \
            --prefix=/opt/riscv32-${{ matrix.variant.abi }} \
            --with-arch=${{ matrix.variant.arch }} \
            --with-abi=${{ matrix.variant.abi }} \
            --enable-languages=c,c++ \
            --disable-gdb \
            --disable-multilib

      - name: Build Linux toolchain
        run: |
          cd riscv-gnu-toolchain
          make linux -j$(nproc)

      - name: Verify installation
        run: |
          echo "Checking installed libraries:"
          find /opt/riscv32-${{ matrix.variant.abi }} -name "libc.so*" -o -name "libgcc.a" | sort
          echo ""
          echo "Checking compiler:"
          /opt/riscv32-${{ matrix.variant.abi }}/bin/riscv32-unknown-linux-gnu-gcc --version
          echo ""
          echo "Checking sysroot:"
          ls -la /opt/riscv32-${{ matrix.variant.abi }}/sysroot/lib/

      - name: Create DEB package structure
        run: |
          PKG_NAME="riscv32-gnu-toolchain-${{ matrix.variant.abi }}"
          PKG_VERSION="${{ needs.get-version.outputs.release_tag }}"
          PKG_ARCH="amd64"
          PKG_DIR="${PKG_NAME}_${PKG_VERSION}_${PKG_ARCH}"

          # Create package directory structure
          mkdir -p "${PKG_DIR}/DEBIAN"
          mkdir -p "${PKG_DIR}/opt"

          # Copy installed toolchain
          cp -r /opt/riscv32-${{ matrix.variant.abi }} "${PKG_DIR}/opt/"

          # Get installed size in KB
          INSTALLED_SIZE=$(du -sk "${PKG_DIR}/opt" | cut -f1)

          # Create control file
          cat > "${PKG_DIR}/DEBIAN/control" <<EOF
          Package: ${PKG_NAME}
          Version: ${PKG_VERSION}
          Section: devel
          Priority: optional
          Architecture: ${PKG_ARCH}
          Installed-Size: ${INSTALLED_SIZE}
          Maintainer: GitHub Actions <noreply@github.com>
          Description: RISC-V GNU Toolchain for ${{ matrix.variant.arch }}/${{ matrix.variant.abi }} (Linux/ELF)
           Cross-compilation toolchain for RISC-V 32-bit ${{ matrix.variant.arch }} architecture
           with ${{ matrix.variant.abi }} ABI (${{ matrix.variant.fpu }}).
           Built from riscv-gnu-toolchain ${{ needs.get-version.outputs.release_tag }}.
           .
           Architecture: ${{ matrix.variant.arch }} (${{ matrix.variant.name }})
           ABI: ${{ matrix.variant.abi }}
           FPU: ${{ matrix.variant.fpu }}
           Languages: C and C++
          Homepage: https://github.com/riscv-collab/riscv-gnu-toolchain
          EOF

          # Create postinst script
          cat > "${PKG_DIR}/DEBIAN/postinst" <<'POSTINST_EOF'
          #!/bin/bash
          set -e

          echo "=========================================="
          echo "RISC-V GNU Toolchain installed to /opt/riscv32-${{ matrix.variant.abi }}"
          echo "=========================================="
          echo ""
          echo "Add /opt/riscv32-${{ matrix.variant.abi }}/bin to your PATH to use the toolchain:"
          echo "  export PATH=/opt/riscv32-${{ matrix.variant.abi }}/bin:\$PATH"
          echo ""
          echo "Usage example:"
          echo "  riscv32-unknown-linux-gnu-gcc -march=${{ matrix.variant.arch }} -mabi=${{ matrix.variant.abi }} -o app app.c"
          echo ""
          POSTINST_EOF

          chmod 755 "${PKG_DIR}/DEBIAN/postinst"

          # Build the package
          dpkg-deb --build --root-owner-group "${PKG_DIR}"

          # Save package name for upload
          echo "deb_file=${PKG_DIR}.deb" >> $GITHUB_ENV
          echo "pkg_version=${PKG_VERSION}" >> $GITHUB_ENV
          echo "pkg_name=${PKG_NAME}" >> $GITHUB_ENV
          echo "variant_abi=${{ matrix.variant.abi }}" >> $GITHUB_ENV

      - name: Generate package info
        run: |
          echo "Package built: ${{ env.deb_file }}"
          ls -lh *.deb
          dpkg-deb --info ${{ env.deb_file }}

      - name: Upload DEB package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.pkg_name }}-${{ env.pkg_version }}
          path: "*.deb"
          retention-days: 90

  create-release:
    needs: [get-version, build]
    runs-on: ubuntu-22.04
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages

      - name: Display structure of downloaded files
        run: ls -R packages

      - name: Move packages to root
        run: |
          mkdir -p release-packages
          find packages -name "*.deb" -exec mv {} release-packages/ \;
          ls -lh release-packages/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          repository: ${{ github.repository }}
          tag_name: riscv-toolchain-${{ needs.get-version.outputs.release_tag }}
          name: RISC-V GNU Toolchain ${{ needs.get-version.outputs.release_tag }}
          body: |
            # RISC-V GNU Toolchain DEB Packages (rv32 Variants)

            Based on upstream release: **${{ needs.get-version.outputs.release_tag }}**

            ## Packages

            This release includes three separate packages, one for each ABI variant:

            | Package | Architecture | ABI | FPU Support | Use Case |
            |---------|-------------|-----|-------------|----------|
            | riscv32-gnu-toolchain-ilp32 | rv32imac | ilp32 | None (soft-float) | Embedded, no FPU |
            | riscv32-gnu-toolchain-ilp32f | rv32imafc | ilp32f | Single-precision | DSP, light FP work |
            | riscv32-gnu-toolchain-ilp32d | rv32gc | ilp32d | Double-precision | General purpose |

            **Languages**: C and C++

            ## Installation

            Install the variant you need:

            ```bash
            # For soft-float (no FPU):
            sudo dpkg -i riscv32-gnu-toolchain-ilp32_${{ needs.get-version.outputs.release_tag }}_amd64.deb
            export PATH=/opt/riscv32-ilp32/bin:$PATH

            # For single-precision FPU:
            sudo dpkg -i riscv32-gnu-toolchain-ilp32f_${{ needs.get-version.outputs.release_tag }}_amd64.deb
            export PATH=/opt/riscv32-ilp32f/bin:$PATH

            # For double-precision FPU (most common):
            sudo dpkg -i riscv32-gnu-toolchain-ilp32d_${{ needs.get-version.outputs.release_tag }}_amd64.deb
            export PATH=/opt/riscv32-ilp32d/bin:$PATH
            ```

            You can install multiple packages side-by-side as they install to different directories.

            ## Usage Examples

            ### Soft-float (rv32imac/ilp32)
            ```bash
            /opt/riscv32-ilp32/bin/riscv32-unknown-linux-gnu-gcc -march=rv32imac -mabi=ilp32 -o hello hello.c
            ```

            ### Single-precision FPU (rv32imafc/ilp32f)
            ```bash
            /opt/riscv32-ilp32f/bin/riscv32-unknown-linux-gnu-gcc -march=rv32imafc -mabi=ilp32f -o hello hello.c
            ```

            ### Double-precision FPU (rv32gc/ilp32d)
            ```bash
            /opt/riscv32-ilp32d/bin/riscv32-unknown-linux-gnu-gcc -march=rv32gc -mabi=ilp32d -o hello hello.c
            ```

            ## Target Details
            - **Platform**: Linux (ELF)
            - **Bit width**: 32-bit
            - **Multilib**: Disabled (each variant is a separate package)
            - **Toolchain prefix**: riscv32-unknown-linux-gnu-
          files: release-packages/*.deb
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
