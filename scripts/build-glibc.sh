#!/bin/bash
set -euo pipefail

MABI=$1
MARCH=$2

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/common.sh"

log_info "Building glibc for ${ARCH} (${MARCH};${MABI})"

# Define ABI-specific library path
LIB_DIR="${TARGET}-${MABI}"

GLIBC_VERSION=2.39
PACKAGE_NAME=libc6-${MABI}
BUILD_DIR=$(pwd)/build/glibc-${MABI}
INSTALL_DIR=$(pwd)/build/glibc-install-${MABI}

# Get glibc source from Ubuntu (includes patches for cross-compilation)
if [ ! -d "glibc-${GLIBC_VERSION}" ]; then
    log_info "Getting glibc source from Ubuntu..."
    # Use apt-get source to get Ubuntu's patched glibc
    apt-get source glibc
    # apt-get source already extracts to glibc-<version>, check if it exists
    if [ ! -d "glibc-${GLIBC_VERSION}" ]; then
        # Find the extracted directory (it might have a different naming scheme)
        GLIBC_SRC_DIR=$(ls -d glibc-*/ 2>/dev/null | head -1 | sed 's:/$::')
        if [ -z "$GLIBC_SRC_DIR" ]; then
            log_error "Failed to extract glibc source"
            exit 1
        fi
        # Rename to expected name if different
        if [ "$GLIBC_SRC_DIR" != "glibc-${GLIBC_VERSION}" ]; then
            log_info "Renaming $GLIBC_SRC_DIR to glibc-${GLIBC_VERSION}"
            mv "$GLIBC_SRC_DIR" glibc-${GLIBC_VERSION}
        fi
    fi
fi

# Create build directory
rm -rf ${BUILD_DIR}
mkdir -p ${BUILD_DIR}
cd ${BUILD_DIR}

# Configure glibc for riscv32
log_info "Configuring glibc..."

# Get kernel headers from toolchain sysroot
TOOLCHAIN_SYSROOT="/opt/riscv32-${MABI}/sysroot"
if [ ! -d "${TOOLCHAIN_SYSROOT}" ]; then
    log_error "Toolchain sysroot not found at ${TOOLCHAIN_SYSROOT}"
    log_error "Please install the riscv32-gnu-toolchain-${MABI} package first"
    exit 1
fi

# Use headers from toolchain for bootstrap
KERNEL_HEADERS="${TOOLCHAIN_SYSROOT}/usr/include"

../../glibc-${GLIBC_VERSION}/configure \
    --prefix=/usr \
    --host=${TARGET} \
    --build=x86_64-linux-gnu \
    --with-headers=${KERNEL_HEADERS} \
    --enable-kernel=5.4.0 \
    --disable-werror \
    --disable-multilib \
    --disable-profile \
    --without-gd \
    --without-selinux \
    --disable-nscd \
    libc_cv_forced_unwind=yes \
    libc_cv_c_cleanup=yes \
    libc_cv_gcc_static_libgcc=-static-libgcc \
    CFLAGS="${CFLAGS}" \
    CXXFLAGS="${CXXFLAGS}" \
    CC="${CC}" \
    CXX="${CXX}"

# Build glibc
log_info "Building glibc (this may take a while)..."
# Workaround: glibc's makefiles generate lib-names.h with references to all ABI variants,
# but only actually build the lib-names file for one variant.
(cd ${BUILD_DIR} && make -j${JOBS}) || {
    # If make failed, check if it's because of missing lib-names-${MABI}.h
    if [ -f ${BUILD_DIR}/gnu/lib-names.h ] && [ ! -f ${BUILD_DIR}/gnu/lib-names-${MABI}.h ]; then
        log_info "Generating missing lib-names-${MABI}.h..."
        # Dynamic loader name based on ABI
        LD_LINUX_NAME="ld-linux-riscv32-${MABI}.so.1"
        cat > ${BUILD_DIR}/gnu/lib-names-${MABI}.h << EOF
/* This file is automatically generated.  */
#ifndef __GNU_LIB_NAMES_H
# error "Never use <gnu/lib-names-${MABI}.h> directly; include <gnu/lib-names.h> instead."
#endif

#define LD_LINUX_SO "${LD_LINUX_NAME}"
#define LIBANL_SO "libanl.so.1"
#define LIBBROKENLOCALE_SO "libBrokenLocale.so.1"
#define LIBC_MALLOC_DEBUG_SO "libc_malloc_debug.so.0"
#define LIBC_SO "libc.so.6"
#define LIBDL_SO "libdl.so.2"
#define LIBGCC_S_SO "libgcc_s.so.1"
#define LIBM_SO "libm.so.6"
#define LIBMVEC_SO "libmvec.so.1"
#define LIBNSL_SO "libnsl.so.1"
#define LIBNSS_COMPAT_SO "libnss_compat.so.2"
#define LIBNSS_DB_SO "libnss_db.so.2"
#define LIBNSS_DNS_SO "libnss_dns.so.2"
#define LIBNSS_FILES_SO "libnss_files.so.2"
#define LIBNSS_HESIOD_SO "libnss_hesiod.so.2"
#define LIBNSS_LDAP_SO "libnss_ldap.so.2"
#define LIBPTHREAD_SO "libpthread.so.0"
#define LIBRESOLV_SO "libresolv.so.2"
#define LIBRT_SO "librt.so.1"
#define LIBTHREAD_DB_SO "libthread_db.so.1"
#define LIBUTIL_SO "libutil.so.1"
EOF
        # Retry the build
        cd ${BUILD_DIR} && make -j${JOBS}
    else
        # Different error, fail
        exit 1
    fi
}

# Install to package directory
log_info "Installing glibc to package directory..."
mkdir -p ${INSTALL_DIR}
cd ${BUILD_DIR} && make install-headers install-lib DESTDIR=${INSTALL_DIR}

# Manually install critical runtime files that install-lib misses
log_info "Manually copying libc.so.6 and dynamic loader..."

# Dynamic loader name based on ABI
LD_NAME="ld-linux-riscv32-${MABI}.so.1"

# Copy libc.so.6 (the main C library shared object)
mkdir -p ${INSTALL_DIR}/usr/lib/${LIB_DIR}/
if [ -f ${BUILD_DIR}/libc.so ]; then
    cp -a ${BUILD_DIR}/libc.so ${INSTALL_DIR}/usr/lib/${LIB_DIR}/libc.so.6
fi
# Copy the dynamic loader (ld.so from elf/ subdirectory)
if [ -f ${BUILD_DIR}/elf/ld.so ]; then
    cp -a ${BUILD_DIR}/elf/ld.so ${INSTALL_DIR}/usr/lib/${LIB_DIR}/${LD_NAME}
fi

# Reorganize files into ABI-specific directories
log_info "Reorganizing files into ABI-specific directories..."
cd ${INSTALL_DIR}
# Move libraries to ABI-specific path
if [ -d usr/lib ]; then
    mkdir -p usr/lib/${LIB_DIR}
    mv usr/lib/*.so* usr/lib/${LIB_DIR}/ 2>/dev/null || true
    mv usr/lib/*.a usr/lib/${LIB_DIR}/ 2>/dev/null || true
    mv usr/lib/*.o usr/lib/${LIB_DIR}/ 2>/dev/null || true
    # Remove empty lib directory if it exists
    rmdir usr/lib 2>/dev/null || true
fi
# Move headers to ABI-specific path
if [ -d usr/include ]; then
    mkdir -p usr/include/${LIB_DIR}
    mv usr/include/* usr/include/${LIB_DIR}/ 2>/dev/null || true
    # Remove empty include directory if it exists
    rmdir usr/include 2>/dev/null || true
fi

# Manually copy lib-names-${MABI}.h if it was generated
if [ -f ${BUILD_DIR}/gnu/lib-names-${MABI}.h ]; then
    log_info "Installing lib-names-${MABI}.h..."
    mkdir -p ${INSTALL_DIR}/usr/include/${LIB_DIR}/gnu
    cp ${BUILD_DIR}/gnu/lib-names-${MABI}.h ${INSTALL_DIR}/usr/include/${LIB_DIR}/gnu/
fi

# Create runtime package (libc6-${MABI})
PKG_NAME="libc6-${MABI}"
log_info "Creating ${PKG_NAME} package..."
cd ../..
RUNTIME_DIR=$(pwd)/build/${PKG_NAME}
mkdir -p ${RUNTIME_DIR}/DEBIAN
mkdir -p ${RUNTIME_DIR}/usr/lib/${LIB_DIR}

# Copy runtime libraries (only versioned .so files and the dynamic loader)
# First, copy all .so.* files (versioned libraries)
find ${INSTALL_DIR}/usr/lib/${LIB_DIR}/ -name "*.so.*" -exec cp -a {} ${RUNTIME_DIR}/usr/lib/${LIB_DIR}/ \; 2>/dev/null || true
# Copy the dynamic loader (ld-*.so.*)
cp -a ${INSTALL_DIR}/usr/lib/${LIB_DIR}/ld-*.so.* ${RUNTIME_DIR}/usr/lib/${LIB_DIR}/ 2>/dev/null || true

cat > ${RUNTIME_DIR}/DEBIAN/control << EOF
Package: ${PKG_NAME}
Version: ${GLIBC_VERSION}-0ubuntu1
Architecture: ${ARCH}
Multi-Arch: same
Section: libs
Priority: optional
Maintainer: ${MAINTAINER}
Description: GNU C Library: Shared libraries (${ARCH} ${MARCH}-${MABI} cross-compile)
 Contains the standard libraries that are used by nearly all programs on
 the system. This package includes shared versions of the standard C library
 and the standard math library, as well as many others for RISC-V 32-bit (${MARCH};${MABI}).
 .
 This package is for cross-compiling.
EOF

dpkg-deb --build --root-owner-group ${RUNTIME_DIR} build/${PKG_NAME}_${GLIBC_VERSION}-0ubuntu1_${ARCH}.deb
log_info "Created: ${PKG_NAME}_${GLIBC_VERSION}-0ubuntu1_${ARCH}.deb"

# Create development package (libc6-dev-${MABI})
PKG_DEV="libc6-dev-${MABI}"
log_info "Creating ${PKG_DEV} package..."
DEV_DIR=$(pwd)/build/${PKG_DEV}
mkdir -p ${DEV_DIR}/DEBIAN
mkdir -p ${DEV_DIR}/usr/lib/${LIB_DIR}
mkdir -p ${DEV_DIR}/usr/include/${LIB_DIR}

# Copy development files
cp -a ${INSTALL_DIR}/usr/include/* ${DEV_DIR}/usr/include/${LIB_DIR}/ 2>/dev/null || true
cp -a ${INSTALL_DIR}/usr/lib/*.a ${DEV_DIR}/usr/lib/${LIB_DIR}/ 2>/dev/null || true
cp -a ${INSTALL_DIR}/usr/lib/*.o ${DEV_DIR}/usr/lib/${LIB_DIR}/ 2>/dev/null || true

cat > ${DEV_DIR}/DEBIAN/control << EOF
Package: ${PKG_DEV}
Version: ${GLIBC_VERSION}-0ubuntu1
Architecture: ${ARCH}
Multi-Arch: same
Section: libdevel
Priority: optional
Depends: ${PKG_NAME} (= ${GLIBC_VERSION}-0ubuntu1)
Maintainer: ${MAINTAINER}
Description: GNU C Library: Development Libraries and Headers (${ARCH} ${MARCH}-${MABI} cross-compile)
 Contains the symlinks, headers, and object files needed to compile
 and link programs which use the standard C library for RISC-V 32-bit (${MARCH};${MABI}).
 .
 This package is for cross-compiling.
EOF

dpkg-deb --build --root-owner-group ${DEV_DIR} build/${PKG_DEV}_${GLIBC_VERSION}-0ubuntu1_${ARCH}.deb
log_info "Created: ${PKG_DEV}_${GLIBC_VERSION}-0ubuntu1_${ARCH}.deb"

# Create debug symbols package (libc6-dbg-${MABI})
PKG_DBG="libc6-dbg-${MABI}"
log_info "Creating ${PKG_DBG} package..."
DBG_DIR=$(pwd)/build/${PKG_DBG}
mkdir -p ${DBG_DIR}/DEBIAN
mkdir -p ${DBG_DIR}/usr/lib/${LIB_DIR}/debug

# The debug symbols are typically in the library directory with debug info
# We'll package the unstripped libraries
cd ${BUILD_DIR}
find . -name "*.so*" -o -name "*.a" | while read lib; do
    if file "$lib" | grep -q "not stripped"; then
        libdir=$(dirname "$lib")
        mkdir -p "${DBG_DIR}/usr/lib/${LIB_DIR}/debug/$libdir"
        cp -a "$lib" "${DBG_DIR}/usr/lib/${LIB_DIR}/debug/$lib" 2>/dev/null || true
    fi
done

cd ../..
cat > ${DBG_DIR}/DEBIAN/control << EOF
Package: ${PKG_DBG}
Version: ${GLIBC_VERSION}-0ubuntu1
Architecture: ${ARCH}
Multi-Arch: same
Section: debug
Priority: optional
Depends: ${PKG_NAME} (= ${GLIBC_VERSION}-0ubuntu1)
Maintainer: ${MAINTAINER}
Description: GNU C Library: detached debugging symbols (${ARCH} ${MARCH}-${MABI} cross-compile)
 This package contains the detached debugging symbols for the GNU C Library
 for RISC-V 32-bit (${MARCH};${MABI}).
 .
 This package is for cross-compiling.
EOF

dpkg-deb --build --root-owner-group ${DBG_DIR} build/${PKG_DBG}_${GLIBC_VERSION}-0ubuntu1_${ARCH}.deb
log_info "Created: ${PKG_DBG}_${GLIBC_VERSION}-0ubuntu1_${ARCH}.deb"

log_info "glibc build complete!"
