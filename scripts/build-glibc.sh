#!/bin/bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/common.sh"

GLIBC_VERSION=2.39
PACKAGE_NAME=libc6-riscv32-cross
BUILD_DIR=$(pwd)/build/glibc
INSTALL_DIR=$(pwd)/build/${PACKAGE_NAME}

log_info "Building glibc ${GLIBC_VERSION} for ${TARGET}"

# Get glibc source from Ubuntu (includes patches for cross-compilation)
if [ ! -d "glibc-${GLIBC_VERSION}" ]; then
    log_info "Getting glibc source from Ubuntu..."
    # Use apt-get source to get Ubuntu's patched glibc
    apt-get source glibc
    # apt-get source already extracts to glibc-<version>, check if it exists
    if [ ! -d "glibc-${GLIBC_VERSION}" ]; then
        # Find the extracted directory (it might have a different naming scheme)
        GLIBC_SRC_DIR=$(ls -d glibc-*/ 2>/dev/null | head -1 | sed 's:/$::')
        if [ -z "$GLIBC_SRC_DIR" ]; then
            log_error "Failed to extract glibc source"
            exit 1
        fi
        # Rename to expected name if different
        if [ "$GLIBC_SRC_DIR" != "glibc-${GLIBC_VERSION}" ]; then
            log_info "Renaming $GLIBC_SRC_DIR to glibc-${GLIBC_VERSION}"
            mv "$GLIBC_SRC_DIR" glibc-${GLIBC_VERSION}
        fi
    fi
fi

# Create build directory
rm -rf ${BUILD_DIR}
mkdir -p ${BUILD_DIR}
cd ${BUILD_DIR}

# Configure glibc for riscv32
log_info "Configuring glibc..."
# Use -Os instead of -O2 to avoid inlining issues with PIC code
GLIBC_CFLAGS="-Os -fno-semantic-interposition"
GLIBC_CXXFLAGS="-Os -fno-semantic-interposition"
# The riscv32 toolchain is already configured with the correct arch/abi
GLIBC_CC="${CC}"
GLIBC_CXX="${CXX}"
../../glibc-${GLIBC_VERSION}/configure \
    --prefix=${PREFIX} \
    --host=${TARGET} \
    --build=x86_64-linux-gnu \
    --target=${TARGET} \
    --with-headers=${PREFIX}/include \
    --enable-kernel=5.4.0 \
    --disable-werror \
    --disable-multilib \
    --disable-profile \
    --without-gd \
    --without-selinux \
    --disable-nscd \
    libc_cv_forced_unwind=yes \
    libc_cv_c_cleanup=yes \
    libc_cv_gcc_static_libgcc=-static-libgcc \
    CFLAGS="${GLIBC_CFLAGS}" \
    CXXFLAGS="${GLIBC_CXXFLAGS}" \
    CC="${GLIBC_CC}" \
    CXX="${GLIBC_CXX}"

# Build glibc
log_info "Building glibc (this may take a while)..."
# Workaround: glibc's makefiles generate lib-names.h with references to all ABI variants,
# but only actually build the lib-names file for one variant. For rv32 ilp32, we need to
# create the ilp32 variant file. We do this by running make until it generates the wrapper,
# then creating the ilp32 variant before continuing.
(cd ${BUILD_DIR} && make -j${JOBS}) || {
    # If make failed, check if it's because of missing lib-names-ilp32.h
    if [ -f ${BUILD_DIR}/gnu/lib-names.h ] && [ ! -f ${BUILD_DIR}/gnu/lib-names-ilp32.h ]; then
        log_info "Generating missing lib-names-ilp32.h..."
        # The file should be similar to lib-names-lp64d.h but for ilp32
        cat > ${BUILD_DIR}/gnu/lib-names-ilp32.h << 'EOF'
/* This file is automatically generated.  */
#ifndef __GNU_LIB_NAMES_H
# error "Never use <gnu/lib-names-ilp32.h> directly; include <gnu/lib-names.h> instead."
#endif

#define LD_LINUX_SO "ld-linux-riscv32-ilp32.so.1"
#define LIBANL_SO "libanl.so.1"
#define LIBBROKENLOCALE_SO "libBrokenLocale.so.1"
#define LIBC_MALLOC_DEBUG_SO "libc_malloc_debug.so.0"
#define LIBC_SO "libc.so.6"
#define LIBDL_SO "libdl.so.2"
#define LIBGCC_S_SO "libgcc_s.so.1"
#define LIBM_SO "libm.so.6"
#define LIBMVEC_SO "libmvec.so.1"
#define LIBNSL_SO "libnsl.so.1"
#define LIBNSS_COMPAT_SO "libnss_compat.so.2"
#define LIBNSS_DB_SO "libnss_db.so.2"
#define LIBNSS_DNS_SO "libnss_dns.so.2"
#define LIBNSS_FILES_SO "libnss_files.so.2"
#define LIBNSS_HESIOD_SO "libnss_hesiod.so.2"
#define LIBNSS_LDAP_SO "libnss_ldap.so.2"
#define LIBPTHREAD_SO "libpthread.so.0"
#define LIBRESOLV_SO "libresolv.so.2"
#define LIBRT_SO "librt.so.1"
#define LIBTHREAD_DB_SO "libthread_db.so.1"
#define LIBUTIL_SO "libutil.so.1"
EOF
        # Retry the build
        cd ${BUILD_DIR} && make -j${JOBS}
    else
        # Different error, fail
        exit 1
    fi
}

# Install to package directory
log_info "Installing glibc to package directory..."
mkdir -p ${INSTALL_DIR}${PREFIX}
# Skip manual/doc installation which can fail with quilt patches
cd ${BUILD_DIR} && make install-headers install-lib DESTDIR=${INSTALL_DIR}

# Manually copy lib-names-ilp32.h if it was generated
if [ -f ${BUILD_DIR}/gnu/lib-names-ilp32.h ]; then
    log_info "Installing lib-names-ilp32.h..."
    mkdir -p ${INSTALL_DIR}${PREFIX}/include/gnu
    cp ${BUILD_DIR}/gnu/lib-names-ilp32.h ${INSTALL_DIR}${PREFIX}/include/gnu/
fi

# Create runtime package (libc6-riscv32-cross)
log_info "Creating libc6-riscv32-cross package..."
cd ../..
RUNTIME_DIR=$(pwd)/build/libc6-riscv32-cross-runtime
mkdir -p ${RUNTIME_DIR}/DEBIAN
mkdir -p ${RUNTIME_DIR}${PREFIX}/lib

# Copy runtime libraries
cp -a ${INSTALL_DIR}${PREFIX}/lib/*.so* ${RUNTIME_DIR}${PREFIX}/lib/ || true
cp -a ${INSTALL_DIR}${PREFIX}/lib/ld-*.so* ${RUNTIME_DIR}${PREFIX}/lib/ || true

cat > ${RUNTIME_DIR}/DEBIAN/control << EOF
Package: libc6-riscv32-cross
Version: ${GLIBC_VERSION}-0ubuntu1
Section: libs
Priority: optional
Architecture: all
Maintainer: ${MAINTAINER}
Description: GNU C Library: Shared libraries (for RISC-V 32-bit cross-compiling)
 Contains the standard libraries that are used by nearly all programs on
 the system. This package includes shared versions of the standard C library
 and the standard math library, as well as many others for RISC-V 32-bit.
 .
 This package is for cross-compiling.
EOF

dpkg-deb --build ${RUNTIME_DIR} build/libc6-riscv32-cross_${GLIBC_VERSION}-0ubuntu1_all.deb
log_info "Created: libc6-riscv32-cross_${GLIBC_VERSION}-0ubuntu1_all.deb"

# Create development package (libc6-dev-riscv32-cross)
log_info "Creating libc6-dev-riscv32-cross package..."
DEV_DIR=$(pwd)/build/libc6-dev-riscv32-cross
mkdir -p ${DEV_DIR}/DEBIAN
mkdir -p ${DEV_DIR}${PREFIX}

# Copy development files
cp -a ${INSTALL_DIR}${PREFIX}/include ${DEV_DIR}${PREFIX}/ || true
mkdir -p ${DEV_DIR}${PREFIX}/lib
cp -a ${INSTALL_DIR}${PREFIX}/lib/*.a ${DEV_DIR}${PREFIX}/lib/ || true
cp -a ${INSTALL_DIR}${PREFIX}/lib/*.o ${DEV_DIR}${PREFIX}/lib/ || true

cat > ${DEV_DIR}/DEBIAN/control << EOF
Package: libc6-dev-riscv32-cross
Version: ${GLIBC_VERSION}-0ubuntu1
Section: libdevel
Priority: optional
Architecture: all
Depends: libc6-riscv32-cross (= ${GLIBC_VERSION}-0ubuntu1)
Maintainer: ${MAINTAINER}
Description: GNU C Library: Development Libraries and Headers (for RISC-V 32-bit)
 Contains the symlinks, headers, and object files needed to compile
 and link programs which use the standard C library for RISC-V 32-bit.
 .
 This package is for cross-compiling.
EOF

dpkg-deb --build ${DEV_DIR} build/libc6-dev-riscv32-cross_${GLIBC_VERSION}-0ubuntu1_all.deb
log_info "Created: libc6-dev-riscv32-cross_${GLIBC_VERSION}-0ubuntu1_all.deb"

# Create debug symbols package (libc6-dbg-riscv32-cross)
log_info "Creating libc6-dbg-riscv32-cross package..."
DBG_DIR=$(pwd)/build/libc6-dbg-riscv32-cross
mkdir -p ${DBG_DIR}/DEBIAN
mkdir -p ${DBG_DIR}${PREFIX}/lib
mkdir -p ${DBG_DIR}/usr/share/doc/libc6-dbg-riscv32-cross

# The debug symbols are typically in the library directory with debug info
# We'll package the unstripped libraries
cd ${BUILD_DIR}
find . -name "*.so*" -o -name "*.a" | while read lib; do
    if file "$lib" | grep -q "not stripped"; then
        mkdir -p "${DBG_DIR}${PREFIX}/lib/$(dirname $lib)"
        cp -a "$lib" "${DBG_DIR}${PREFIX}/lib/$lib" 2>/dev/null || true
    fi
done

cat > ${DBG_DIR}/DEBIAN/control << EOF
Package: libc6-dbg-riscv32-cross
Version: ${GLIBC_VERSION}-0ubuntu1
Section: debug
Priority: optional
Architecture: all
Depends: libc6-riscv32-cross (= ${GLIBC_VERSION}-0ubuntu1)
Maintainer: ${MAINTAINER}
Description: GNU C Library: detached debugging symbols (for RISC-V 32-bit)
 This package contains the detached debugging symbols for the GNU C Library
 for RISC-V 32-bit.
 .
 This package is for cross-compiling.
EOF

cd ../..
dpkg-deb --build ${DBG_DIR} build/libc6-dbg-riscv32-cross_${GLIBC_VERSION}-0ubuntu1_all.deb
log_info "Created: libc6-dbg-riscv32-cross_${GLIBC_VERSION}-0ubuntu1_all.deb"

log_info "glibc build complete!"
